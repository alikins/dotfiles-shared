# .bashrc

# Keep Track of the shell env overtime.
if [ -d ~/.bash_envs ]; then
    if [ -f ~/bin/envsort ]; then
        ~/bin/envsort > ~/.bash_envs/env_prerc_$$
    fi
    set > ~/.bash_envs/env_set_prerc_$$
    complete > ~/.bash_envs/bash_complete_prerc_$$
fi

# Source global definitions
if [ -f /etc/bashrc ]; then
	. /etc/bashrc
fi

# Uncomment the following line if you don't like systemctl's auto-paging feature:
# export SYSTEMD_PAGER=

# User specific aliases and functions

if [ -f ~/.bash_functions ]; then
	source ~/.bash_functions
fi

#if [ -f ~/.bash_vagrant_functions ]; then
#    source ~/.bash_vagrant_functions
#fi

if [ -d ~/.bash_completion.d ]; then
    # shellcheck source=/home/adrian/.bash_completion.d/all.sh
    source ~/.bash_completion.d/all.sh
fi

if [ -f ~/.local/bin/aws_completer ]; then
    # shellcheck source=/home/adrian/.local/bin/aws_completer
    complete -C "$HOME/.local/bin/aws_completer" aws
fi

if [ -f ~/.bash_aliases ]; then
    source ~/.bash_aliases
fi

case "$OSTYPE" in
    darwin*)
        source ~/.bashrc_osx ;;
    linux*)
        source ~/.bashrc_linux ;;
esac

if [ -f ~/.bashrc_ansible ]; then
    source ~/.bashrc_ansible
fi

if [ -f ~/.bashrc_galaxy ]; then
    source ~/.bashrc_galaxy
fi


# turn off flow control, aka ctrl-s/q
# if in an interactive shell
[[ $- == *i* ]] && stty -ixon

# Split these up into ansible roles
# ah, dyndns...
HOSTNAME="$(hostname)"
export HOSTNAME

EDITOR='vim -f'
export EDITOR

# add ~/pythons/bin with py2.4/2.5/2.6/3.4/3.5 to path
pre_path "${HOME}/pythons/bin"

# python usersite
PYTHON_USER_SITE_BIN=$(python -c 'import site;import os; print(os.path.join(site.USER_BASE, "bin"))')
pre_path "${PYTHON_USER_SITE_BIN}"

# python3 usersite
PYTHON3_USER_SITE_BIN=$(python3 -c 'import site;import os; print(os.path.join(site.USER_BASE, "bin"))')
add_path "${PYTHON3_USER_SITE_BIN}"

# prepend ~/bin to front of path
pre_path "${HOME}/bin"

OPENSHIFT_CLIENT_TOOLS="${HOME}/openshift/bin"
add_path "${OPENSHIFT_CLIENT_TOOLS}"

# Language/runtime specific stuff
JAVA_HOME=/usr/lib/jvm/java
export JAVA_HOME

M2_REPO="${HOME}/.m2/repository"
export M2_REPO

GOPATH="${HOME}/gopath"
export GOPATH
add_path "${GOPATH}/bin"

MINISHIFT_PATH="${HOME}/minishift"
export MINISHIFT_PATH
add_path "${MINISHIFT_PATH}/bin"

PERL_HOME="${HOME}/perl5"
PERL_PATH="${PERL_HOME}/bin"
add_path "${PERL_PATH}"

PERL5LIB="${PERL_HOME}/lib/perl5"
export PERL5LIB

# PERL_LOCAL_LIB_ROOT="${PERL_HOME}/${PERL_LOCAL_LIB_ROOT"

PERL_MB_OPT="--install_base \"/home/adrian/perl5\""
export PERL_MB_OPT

PERL_MM_OPT="INSTALL_BASE=/home/adrian/perl5"
export PERL_MM_OPT;

# rvm
# add_path "${HOME}/.rvm/bin"

# cabal rpm does this itself in /etc/profile.d/cabal-install.sh
#LOCAL_CABAL="${HOME}/.cabal"
#add_path "${LOCAL_CABAL}/bin/"

# npm installing 'globally' to home dir
# 'prefix' ~/node in ~/.npmrc
add_path "${HOME}/node/bin"

PKG_CONFIG_PATH=/usr/local/lib/pkgconfig/
export PKG_CONFIG_PATH

# module to run when python interactive
# mode starts up
export PYTHONSTARTUP=~/.pystartup

VIRTUALENVWRAPPER="${HOME}/bin/virtualenvwrapper.sh"
if [ -f "${VIRTUALENVWRAPPER}" ] ; then
    source "${VIRTUALENVWRAPPER}"
fi

# pipx https://github.com/pipxproject/pipx
# env vars to install to ~/venvs/ and link scripts
# to ~/bin
export PIPX_HOME="${HOME}"
export PIPX_BIN_DIR="${HOME}/bin"


# Use system ca-bundle for requests, as used by
# 'http' cli tool
export REQUESTS_CA_BUNDLE=/etc/ssl/certs/ca-bundle.crt

export GITHUB_NICK=alikins

# for "gist" tool
#export GITHUB_TOKEN=$(cat ~/.github-token)

# make ack look for a .ackrc in pwd
#export ACKRC=.ackrc

# lots of history
export HISTTIMEFORMAT="%F %T "
export HISTSIZE=300000
export HISTFILESIZE=500000

# append history instead of overwriting
shopt -s histappend
# show result of history sub (either after a return or 'magic space'
# based on http://www.catonmat.net/blog/the-definitive-guide-to-bash-command-line-history/
shopt -s histverify

# save the history every prompt
export PROMPT_COMMAND="history -a;"

alias grep="grep --color=auto"
alias nosetest="nosetests"
alias nose="nosetests -v -d -s"
alias eclipse-open="eclipse --launcher.openFile"
alias tailf="tail --follow=name"
alias gm="git checkout master"
alias yesterday='history -n; history | grep $(date "+%F" --date="yesterday"); yesterday-git'
alias jsonformat='jq .'
alias json_format='jq .'
alias jpp='jq .'
# envsort is a python tool to sort the env by env var name and to preserve multiline
# values that 'env|sort' cant.
alias es='envsort'

# we track the shell env on shell startup, so we can compare current env vars to see
# if tools/scripts/me have altered them.

# diff of current env to env immed after running ~/.bashrc
alias envdiff="diff -d -u --label from_login ~/.bash_envs/env_postrc_\$\$ --label now <(envsort)|colordiff"
# diff of current env to env before running .bashrc
alias envdifftoprerc="diff -d -u --label before_dotbashrc ~/.bash_envs/env_prerc_\$\$ --label now <(envsort)|colordiff"
# diff of before bashrc to env after bashrc  to env before running .bashrc
alias envdifftopostrc="diff -d -u --label before_dotbashrc ~/.bash_envs/env_prerc_\$\$ --label after_dotbashrc ~/.bash_envs/env_postrc_\$\$|colordiff"

alias venv_mazer='source ~/venvs/mazer/bin/activate'
alias venv_mazerpy2='source ~/venvs/galaxy-cli-py27/bin/activate'
alias venv_ans='source ~/venvs/ansible-py36/bin/activate'
alias venv_anspy3='source ~/venvs/ansible-py3/bin/activate'
alias venv_galaxy='source ~/venvs/galaxy-py27/bin/activate'
alias venv_galaxypy36='source ~/venvs/galaxy-py36/bin/activate'

# we have a better version in ~/.bash_functions
# make this quiet
unalias which > /dev/null 2>&1  || :

# z cd history thingamabob
# https://github.com/rupa/z
if [ -f ~/src/z/z.sh ]; then
    . ~/src/z/z.sh
fi

# prompt, user@host dir
#C_NICE_ORANGE="\[\033[38;5;166m\]"
#C_RST='\[\033[m\]'
#PS1=""
#PS1+="[${C_NICE_ORANGE}\W${C_RST}"

#export PS1


# make 256 color term stuff work
if [ "$TERM" == "xterm" ]; then
    # No it isn't, it's gnome-terminal
    export TERM=xterm-256color
fi

# env snapshot after startup
if [ -d ~/.bash_envs ]; then
    if [ -f ~/bin/envsort ]; then
        envsort > ~/.bash_envs/env_postrc_$$
    fi
    set > ~/.bash_envs/env_set_postrc_$$
    complete > ~/.bash_envs/bash_complete_postrc_$$
fi

[ -f ~/.fzf.bash ] && source ~/.fzf.bash

export GPG_TTY=$(tty)
